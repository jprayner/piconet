// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------ //
// pinctl //
// ------ //

#define pinctl_wrap_target 0
#define pinctl_wrap 23

#define pinctl_ADLC_CLK_RISE_FALL 2
#define pinctl_ADLC_OUTPUT_DELAY_1 5
#define pinctl_ADLC_OUTPUT_DELAY_2 5
#define pinctl_ADLC_CS_HOLD_TIME 1
#define pinctl_ADLC_WRITE_HOLD_TIME 1

static const uint16_t pinctl_program_instructions[] = {
            //     .wrap_target
    0xb8e3, //  0: mov    osr, null       side 3     
    0x7888, //  1: out    pindirs, 8      side 3     
    0x98a0, //  2: pull   block           side 3     
    0x7848, //  3: out    y, 8            side 3     
    0x7828, //  4: out    x, 8            side 3     
    0x3895, //  5: wait   1 gpio, 21      side 3     
    0x3915, //  6: wait   0 gpio, 21      side 3 [1] 
    0x1832, //  7: jmp    !x, 18          side 3     
    0xa002, //  8: mov    pins, y         side 0     
    0xa0eb, //  9: mov    osr, !null      side 0     
    0x6088, // 10: out    pindirs, 8      side 0     
    0x2195, // 11: wait   1 gpio, 21      side 0 [1] 
    0x4048, // 12: in     y, 8            side 0     
    0x8020, // 13: push   block           side 0     
    0x2215, // 14: wait   0 gpio, 21      side 0 [2] 
    0xa8e3, // 15: mov    osr, null       side 1     
    0x6888, // 16: out    pindirs, 8      side 1     
    0x1802, // 17: jmp    2               side 3     
    0x3695, // 18: wait   1 gpio, 21      side 2 [6] 
    0xb442, // 19: nop                    side 2 [4] 
    0x5008, // 20: in     pins, 8         side 2     
    0x9020, // 21: push   block           side 2     
    0x3215, // 22: wait   0 gpio, 21      side 2 [2] 
    0x1802, // 23: jmp    2               side 3     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program pinctl_program = {
    .instructions = pinctl_program_instructions,
    .length = 24,
    .origin = -1,
};

static inline pio_sm_config pinctl_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + pinctl_wrap_target, offset + pinctl_wrap);
    sm_config_set_sideset(&c, 2, false, false);
    return c;
}

void pinctl_program_init(PIO pio, uint sm, uint offset, uint pin_data_0, uint pin_cs, float frequency) {
    pio_sm_config config = pinctl_program_get_default_config(offset);
    // init SIDE-SET pin group: ADLC !CS signal and RnW
    pio_gpio_init(pio, pin_cs);
    pio_gpio_init(pio, pin_cs + 1);
    sm_config_set_sideset_pins(&config, pin_cs);
    pio_sm_set_consecutive_pindirs(pio, sm, pin_cs, 2, true); // configure for output
    // init (identical) IN and OUT pin groups: our data pins D0-D7
    pio_gpio_init(pio, pin_data_0 + 0);
    pio_gpio_init(pio, pin_data_0 + 1);
    pio_gpio_init(pio, pin_data_0 + 2);
    pio_gpio_init(pio, pin_data_0 + 3);
    pio_gpio_init(pio, pin_data_0 + 4);
    pio_gpio_init(pio, pin_data_0 + 5);
    pio_gpio_init(pio, pin_data_0 + 6);
    pio_gpio_init(pio, pin_data_0 + 7);
    sm_config_set_out_pins(&config, pin_data_0, 8);
    sm_config_set_in_pins(&config, pin_data_0);
    pio_sm_set_consecutive_pindirs(pio, sm, pin_data_0, 8, false);  // configure for input initially (will change over time)
    // init clock
    float clock_divider = (float) clock_get_hz(clk_sys) / frequency;
    sm_config_set_clkdiv(&config, clock_divider);
    // configure output shift register — 8 bits for value, 1 bit for action (can't use auto-push because of OSR manipulation to support pindir changes)
    // args: BOOL right_shift, BOOL autopull, 1..32 pull_threshold
    sm_config_set_out_shift(&config, true, false, 9);
    sm_config_set_in_shift(&config, false, false, 8);
    pio_sm_init(pio, sm, offset, &config);
    pio_sm_set_enabled(pio, sm, true);
}

#endif

