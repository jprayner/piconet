import { EconetEvent } from './econetEvent';

/**
 * Describes the current operating mode of the Piconet board.
 */
export enum RxMode {
  /**
   * The board starts in this mode. No events are generated in response to network traffic,
   * allowing the client to initialise configuration before proceeding.
   */
  STOP,

  /**
   * The normal Econet station operating mode. The board generates events for broadcast frames
   * or frames targeting the configured local Econet station number. You should normally set
   * the station number before entering this mode.
   */
  LISTEN,

  /**
   * The board generates an event for every frame received, regardless of its source or
   * destination (promiscuous mode). Useful for capturing traffic between other stations like
   * the BBC NETMON utility. A code example is provided for how to build such a utility.
   */
  MONITOR,
}

/**
 * Generated by the board in response to a `STATUS` command. This could be in response to a
 * `readStatus` call to the driver or as a side-effect of various other operations.
 */
export class StatusEvent extends EconetEvent {
  constructor(
    /**
     * The firmware version of the board. This conforms to semantic versioning v.2.0.0
     * (major/minor/patch) and is used to test compatibility with the driver.
     */
    public firmwareVersion: string,

    /**
     * The number of the local Econet station.
     */
    public econetStation: number,

    /**
     * Current value of the Motorola ADLC 6854's status register 1.
     */
    public statusRegister1: number,

    /**
     * Current operating mode of the board.
     */
    public rxMode: RxMode,
  ) {
    super();
  }

  public toString() {
    return `[${this.constructor.name} firmwareVersion=${
      this.firmwareVersion
    } econetStation=${this.econetStation} statusRegister1=${
      this.statusRegister1
    } rxMode=${RxMode[this.rxMode]}]`;
  }
}
